name: "Construction de l'image et Déploiement Docker"
on:
  push:
    branches:
      - 'production' # Le workflow se déclenche pour les push sur la branche "production"
  workflow_dispatch:
    # Permet de lancer manuellement le workflow avec une branche spécifique

jobs:
  build-docker:
    name: Construction et publication image Docker
    runs-on: ubuntu-latest
    steps:
      # 1. Récupération du code source
      - name: Récupération du code
        # Clone le dépôt GitHub dans la VM
        uses: actions/checkout@v3

      # 2. Connexion à Docker Hub
      - name: Connexion à Docker Hub
        # Connexion au registre Docker Hub en utilisant les secrets configurés
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # 3. Build et push de l'image Docker
      - name: Build and Push Docker Image
        # Construit l'image Docker avec la dernière version du code et la pousse sur Docker Hub
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/cliandcollect-api:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/cliandcollect-api:latest

  deploy:
    name: Déploiement Docker sur le serveur
    runs-on: ubuntu-latest
    # Ce job dépend de la complétion du job "build-docker"
    needs: build-docker

    steps:
      - name: Récupérer le code source
        uses: actions/checkout@v3

      - name: Configurer la clé SSH
        # Crée un fichier contenant la clé privée pour accéder au serveur distant
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 400 private_key.pem

      - name: Créer le fichier .env localement
        # Génère un fichier .env contenant toutes les variables d'environnement requises pour l'application
        run: |
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" >> .env
          echo "MONGO_API_USER=${{ secrets.MONGO_API_USER }}" >> .env
          echo "MONGO_API_PASSWORD=${{ secrets.MONGO_API_PASSWORD }}" >> .env
          echo "SPRING_APPLICATION_NAME=${{ secrets.SPRING_APPLICATION_NAME }}" >> .env
          echo "SPRING_DATA_MONGODB_URI=${{ secrets.SPRING_DATA_MONGODB_URI }}" >> .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
          echo "SPRING_JPA_HIBERNATE_DDL_AUTO=${{ secrets.SPRING_JPA_HIBERNATE_DDL_AUTO }}" >> .env
          echo "SECURITY_JWT_SECRET_KEY=${{ secrets.SECURITY_JWT_SECRET_KEY }}" >> .env
          echo "SECURITY_JWT_EXPIRATION_TIME=${{ secrets.SECURITY_JWT_EXPIRATION_TIME }}" >> .env

      - name: Copier les fichiers nécessaires vers le serveur
        # Transfère les fichiers requis pour le déploiement vers le serveur distant
        # et utilise la clé privée ssh pour se connecter
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            docker-compose.yml \
            .env \
            ${{ vars.SSH_USER }}@${{ vars.SSH_SERVER }}:/var/www/api-cliandcollect

      - name: Nettoyer, arrêter et redémarrer les conteneurs sur le serveur distant
        # Arrête les conteneurs existants, nettoie les ressources inutilisées et redémarre les conteneurs à partir du docker-compose.yml.
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_SERVER }} << EOF
            set -e
            # Passage en root et exécution des commandes
            sudo bash -c "
              cd /var/www/api-cliandcollect/ &&
              
              # Arrêter les conteneurs en cours
              docker compose down || true &&
              
              # Nettoyer les conteneurs et images inutilisés, sans affecter les volumes
              docker container prune --force &&
              docker image prune --all --force &&
              
              # Redémarrer les conteneurs
              docker compose up -d --build
            "
          EOF

      - name: Nettoyer les fichiers temporaires
        # Supprime la clé privée temporaire locale pour des raisons de sécurité
        if: always()
        run: rm -f private_key.pem
