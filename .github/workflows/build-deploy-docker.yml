name: "Construction de l'image et Déploiement Docker"
on:
  push:
    branches:
      - 'production'
      - 'recette'
  workflow_dispatch:
    inputs:
      branch:
        description: "Branche à utiliser pour le workflow"
        default: "production"
        required: true

jobs:
  build-docker:
    name: Construction et publication image Docker
    runs-on: ubuntu-latest
    steps:
      # 1. Récupération du code source
      - name: Récupération du code
        uses: actions/checkout@v3

      # 2. Connexion à Docker Hub
      - name: Connexion à Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # 3. Build et push de l'image Docker
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/cliandcollect-api:latest .
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/cliandcollect-api:latest

  deploy:
    name: Déploiement Docker sur le serveur
    runs-on: ubuntu-latest
    needs: build-docker   # Le job de déploiement se fait après le job de build
    env:
      SSH_USER: ${{ secrets.SSH_USER }}  # Définir la variable d'environnement SSH_USER
      SSH_SERVER: ${{ secrets.SSH_SERVER }}  # Définir la variable d'environnement SSH_SERVER

    steps:
      - name: Récupérer le code source
        uses: actions/checkout@v3

      - name: Configurer la clé SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 400 private_key.pem

      - name: Vérification de l'adresse du serveur
        run: |
          echo "Test de la connexion SSH vers le serveur ${SSH_USER}@${SSH_SERVER}"
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_SERVER }} "hostname"

      - name: Copier les fichiers nécessaires sur le serveur
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            docker-compose.yml \
            -r docker-config \
            ${{ env.SSH_USER }}@${{ env.SSH_SERVER }}:/var/www/cliandcollect/

      - name: Générer et transférer le fichier .env sur le serveur
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_SERVER }} << EOF
            set -e
            sudo -s <<END
              cd /var/www/cliandcollect/
              echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > .env
              echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
              echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
              echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
              echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}" >> .env
              echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> .env
              echo "MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }}" >> .env
              echo "MONGO_API_USER=${{ secrets.MONGO_API_USER }}" >> .env
              echo "MONGO_API_PASSWORD=${{ secrets.MONGO_API_PASSWORD }}" >> .env
            END
          EOF

      - name: Nettoyer, arrêter et redémarrer les conteneurs sur le serveur distant
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_SERVER }} << EOF
            set -e
            sudo -s <<END
              cd /var/www/cliandcollect/
              
              # Arrêter les conteneurs en cours
              docker compose down || true
              
              # Nettoyer les conteneurs et images inutilisés, sans affecter les volumes
              docker container prune --force
              docker image prune --all --force
              
              # Redémarrer les conteneurs
              docker compose up -d --build
            END
          EOF

      - name: Nettoyer les fichiers temporaires
        if: always()
        run: rm -f private_key.pem
