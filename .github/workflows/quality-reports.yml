name: Construction et Rapports de Qualité pour API Spring Boot

on:
  push:
  workflow_dispatch:

jobs:
  build:
    name: Construction du projet
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code source depuis le dépôt
      - name: Récupération du code
        uses: actions/checkout@v3

      # Étape 2 : Configurer le JDK 21 pour la construction du projet
      - name: Configuration de JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Étape 3 : Mise en cache des dépendances Maven pour accélérer les builds
      - name: Mise en cache des dépendances Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Étape 4 : Construction du projet sans exécuter les tests
      - name: Construction du projet
        run: mvn -f apicliandcollect/pom.xml clean install -DskipTests

    outputs:
      maven-cache-key: ${{ steps.cache.outputs.cache-hit }}

  analyze:
    name: Analyse du code et rapports de qualité
    runs-on: ubuntu-latest
    needs: build

    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_DATABASE: cliandcollect-tests
        ports:
          - 27017:27017

    steps:
      - name: Récupération du code
        uses: actions/checkout@v3

      - name: Configuration de JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Mise en cache des dépendances Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ needs.build.outputs.maven-cache-key }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Ajouter les configurations privées dans application-test.properties
        run: |
          echo "security.jwt.secret-key=${{ secrets.SECURITY_JWT_SECRET_KEY }}" > apicliandcollect/src/test/resources/application-test.properties
          echo "security.jwt.expiration-time=${{ secrets.SECURITY_JWT_EXPIRATION_TIME }}" >> apicliandcollect/src/test/resources/application-test.properties

      - name: Exécution des tests et génération du rapport JaCoCo
        run: mvn -B test jacoco:report -f apicliandcollect/pom.xml

      - name: Vérification de la génération du rapport JaCoCo
        run: |
          ls -R apicliandcollect/target/

      - name: jacoco-reporter
        uses: PavanMudigonda/jacoco-reporter@v5.0
        with:
          coverage_results_path: apicliandcollect/target/site/jacoco/jacoco.xml
          github_token: ${{ secrets.GITHUB_TOKEN }}
       
      - name: Ajouter un résumé du job de couverture
        run: echo "${{ steps.jacoco-reporter.outputs.coverageSummary }}" >> $GITHUB_STEP_SUMMARY

      - name: Mise en cache des packages SonarQube
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Analyse du code avec SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -f apicliandcollect/pom.xml -Dsonar.projectKey=SAE-S5-01_API
